#include <SoftwareSerial.h>

#define PINNUMBER ""
#define DEBUG true
//String phone_no = "+YYXXXXXXXXX"; // +country_codePhonenumber like:+919999999999
String owner_num = "+919430214629";
String owner_sms = "";
int parked_latitude = 0;
int parked_longitude = 0;
int new_latitude = 0;
int new_longitude = 0;
String vehicle_status = "";
String response_sms = "";
// initialize the library instance

static const int RXPin = 2, TXPin = 3;
static const uint32_t GPSBaud = 9600;

// The serial connection to the GPS device
SoftwareSerial mySerial(RXPin, TXPin);

// Function to check the gsm status 

void send_location_by_sms(){
  String txtMsg = response_sms; //msg return by gps
  Serial.println("SENDING");
  Serial.println();
  Serial.println("Message:");
  Serial.println(txtMsg);
  delay(2000);
  // Send SMS command
  //sendData("AT+CMGS=\"+919962534005\"\r",1000,DEBUG);
  //Serial.print(phone_no);
  sendData("AT+CMGS="+owner_num,1000,DEBUG);
  delay(1000);
  // Sending the text message
  mySerial.println(txtMsg);
  delay(100);
  // clicking on enter key 
  mySerial.println((char)26);
  delay(1000);
  Serial.print("Message Send!");
   
}

  
void gsmInit(){
   //SMS text mode closed
   sendData("AT+CMGF=0",1000,DEBUG);
   delay(1000);
   //SMS text mode checking
   sendData("AT+CMGR=?",1000,DEBUG);
   delay(1000);
   //SMS text mode opening
   sendData("AT+CMGF=1",1000,DEBUG);
  // This command selects the procedure for message reception from the network. 
  //mySerial.print("AT+CNMI=2,2,0,0,0\r"); 
}//End of get_owner_sms method  

void get_owner_sms(){
 
  // If there are any SMSs available()
  if(mySerial.available()>0){
    owner_sms = mySerial.readString();
    vehicle_status = owner_sms;
    Serial.print(vehicle_status);
    delay(1000);
    display_location();
    delay(1000); // When Owner will send any msg vehicle location will updated
    parked_latitude = new_latitude;
    parked_longitude = new_longitude;  
    delay(1000);
  } 
}

  
boolean set_vehicle_moving_status(){
 int count = 0;
 boolean vehicle_mov_status = true;
 for(int i = 1; i <= 5; i++){
   if(parked_latitude != new_latitude || parked_longitude != new_longitude){
      count++; 
   }
 }
 if(count >= 3){  // Here cheking the longitude and latitude atleast 3 times to confirm the moving status
      return vehicle_mov_status;  
  }
 else{
      vehicle_mov_status = false;
      return vehicle_mov_status;
  } 
}

void setup()
{
  Serial.begin(GPSBaud);
  mySerial.begin(GPSBaud);
  Serial.println(F("Tracking Device Project"));
  Serial.println(F("by Abhishek Kumar"));
}

void loop()
{  
  if(set_vehicle_moving_status()){
          if(vehicle_status.equalsIgnoreCase("parked")){
              send_location_by_sms();
              //code for buzzer on
          }
    }         
  if(owner_sms.equalsIgnoreCase("track")){
          send_location_by_sms();
              
    }
  if (millis() > 5000 && gps.charsProcessed() < 10)
  {
    Serial.println(F("No GPS detected: check wiring."));
    while(true);
   }
}

void display_location(){
  if(mySerial.available() > 0){
    
    if (gps.encode(mySerial.read())){
       Serial.print(F("Location: ")); 
       if (gps.location.isValid()){
            Serial.print(gps.location.lat(), 6);
            Serial.print(F(","));
            Serial.print(gps.location.lng(), 6);
            new_latitude = (gps.location.lat(), 6);
            new_longitude =(gps.location.lng(), 6);
            response_sms = "Latitude: " + new_latitude;
            response_sms = response_sms + " Longitude: " + new_longitude; 
       }
       else{
            Serial.print(F("INVALID"));
       }

       Serial.print(F("  Date/Time: "));
       if (gps.date.isValid()){
            Serial.print(gps.date.month());
            Serial.print(F("/"));
            Serial.print(gps.date.day());
            Serial.print(F("/"));
            Serial.print(gps.date.year());
            response_sms = response_sms +" Date: " +gps.date.month() +"/"+ gps.date.day()+"/"+gps.date.year();
       }
       else{
            Serial.print(F("INVALID"));
       }

      Serial.print(F(" "));
      if (gps.time.isValid()){
            if (gps.time.hour() < 10) Serial.print(F("0"));
            Serial.print(gps.time.hour());
            Serial.print(F(":"));
            if (gps.time.minute() < 10) Serial.print(F("0"));
            Serial.print(gps.time.minute());
            Serial.print(F(":"));
            if (gps.time.second() < 10) Serial.print(F("0"));
            Serial.print(gps.time.second());
            Serial.print(F("."));
            if (gps.time.centisecond() < 10) Serial.print(F("0"));
            Serial.print(gps.time.centisecond());
            response_sms = response_sms + "Time: "+gps.time.hour()+":"+gps.time.minute()+":"+gps.time.second();
       }
      else{
            Serial.print(F("INVALID"));
      }

      Serial.println();
    }
  }
 }//End of display location method


 String sendData(String command, const int timeout, boolean debug)
{
    String response = "";    
    mySerial.println(command); 
    long int time = millis();   
    
    while( (time+timeout) > millis())
    {
      while(mySerial.available())
      {       
        char c = mySerial.read(); 
        response+=c;
      }  
    }    
    if(debug)
    {
      Serial.println(response);
    }    
    return response;
}
